/* A lexical scanner generated by flex */

/* scanner skeleton version:
 * $Header: f:/SRC.SSB/flex/flex.skel,v 1.1.1.1 1992/04/22 12:07:56 ak Exp $
 */

#define FLEX_SCANNER


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

extern "C" {
#include <stdio.h>
#include <stdlib.h>
#include <osfcn.h>
}

/* use prototypes in function declarations */
#define YY_USE_PROTOS

/* the "const" storage-class-modifier is valid */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#include <stdio.h>

#ifdef __STDC__

#ifdef __GNUC__
#include <stddef.h>
void *malloc( size_t );
void free( void* );
#else
#include <stdlib.h>
#endif	/* __GNUC__ */

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */


#ifdef __TURBOC__
#define YY_USE_CONST
#endif


#ifndef YY_USE_CONST
#define const
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
/* we can't get here if it's an ANSI C compiler, or a C++ compiler,
 * so it's got to be a K&R compiler, and therefore there's no standard
 * place from which to include these definitions
 */
char *malloc();
int free();
int read();
#endif


/* amount of stuff to slurp up with each read */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* returned upon end-of-file */
#define YY_END_TOK 0

/* copy whatever the last rule matched to the standard output */

/* cast to (char *) is because for 8-bit chars, yytext is (unsigned char *) */
/* this used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite()
 */
#define ECHO (void) fwrite( (char *) yytext, yyleng, 1, yyout )

/* gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#define YY_INPUT(buf,result,max_size) \
	if ( (result = read( fileno(yyin), (char *) buf, max_size )) < 0 ) \
	    YY_FATAL_ERROR( "read() in flex scanner failed" );
#define YY_NULL 0

/* no semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#define yyterminate() return ( YY_NULL )

/* report a fatal error */

/* The funky do-while is used to turn this macro definition into
 * a single C statement (which needs a semi-colon terminator).
 * This avoids problems with code like:
 *
 * 	if ( something_happens )
 *		YY_FATAL_ERROR( "oops, the something happened" );
 *	else
 *		everything_okay();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the YY_FATAL_ERROR() call.
 */

#define YY_FATAL_ERROR(msg) \
	do \
		{ \
		(void) fputs( msg, stderr ); \
		(void) putc( '\n', stderr ); \
		exit( 1 ); \
		} \
	while ( 0 )

/* default yywrap function - always treat EOF as an EOF */
#define yywrap() 1

/* enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN
 */
#define BEGIN yy_start = 1 + 2 *

/* action number for EOF rule of a given start state */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* special action meaning "start processing a new file" */
#define YY_NEW_FILE \
	do \
		{ \
		yy_init_buffer( yy_current_buffer, yyin ); \
		yy_load_buffer_state(); \
		} \
	while ( 0 )

/* default declaration of generated scanner - a define so the user can
 * easily add parameters
 */
#define YY_DECL int yylex YY_PROTO(( void )) 

/* code executed at the end of each rule */
#define YY_BREAK break;

#define YY_END_OF_BUFFER_CHAR 0

#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (YY_READ_BUF_SIZE * 2) /* size of default input buffer */
#endif

typedef struct yy_buffer_state *YY_BUFFER_STATE;

#define FLEX_DEBUG
#define YY_CHAR unsigned char
# line 1 "scan.l"
#define INITIAL 0
# line 2 "scan.l"
/*****************************************************************************
 * $Id: scan.l,v 1.8 1993/02/10 21:25:53 ak Exp $
 *****************************************************************************
 * $Log: scan.l,v $
 * Revision 1.8  1993/02/10  21:25:53  ak
 * *** empty log message ***
 *
 * Revision 1.7  1993/02/10  20:58:19  ak
 * Pass menues.
 *
 * Revision 1.6  1993/02/06  00:15:13  ak
 * *** empty log message ***
 *
 * Revision 1.5  1993/02/06  00:09:53  ak
 * *** empty log message ***
 *
 * Revision 1.4  1993/02/05  23:44:06  ak
 * Bugfixes and cosmetic changes.
 *
 * Revision 1.3  1993/02/04  17:51:18  ak
 * *** empty log message ***
 *
 * Revision 1.2  1993/02/04  15:28:58  ak
 * *** empty log message ***
 *
 * Revision 1.1.1.1  1993/02/04  15:21:54  ak
 * Texinfo -> OS/2 IPF/INF converter.
 *
 * Revision 1.1  1993/02/04  15:21:51  ak
 * Initial revision
 *
 *****************************************************************************/

static char *rcsid = "$Id: scan.l,v 1.8 1993/02/10 21:25:53 ak Exp $";

#include "info.h"
#include <ctype.h>
#include <io.h>
#include <strstream.h>
extern "C" char *strupr(char *);

String & arg();
String & eol();
void unexpected(const char *);
void footnote();
void skip();
void dot();
void include(const char *);

const int	MaxIncl = 10;
YY_BUFFER_STATE inclstack[MaxIncl];
int		incllevel = 0;
#define TABLE 1
#define MENU 2
#define FALSE 3
#define IGNORE 4
#define TEX 5
#define TITLE 6
# line 58 "scan.l"

/* done after the current pattern has been matched and before the
 * corresponding action - sets up yytext
 */
#define YY_DO_BEFORE_ACTION \
	yytext = yy_bp; \
	yyleng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* return all but the first 'n' matched characters back to the input stream */
#define yyless(n) \
	do \
		{ \
		/* undo effects of setting up yytext */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext )


struct yy_buffer_state
    {
    FILE *yy_input_file;

    YY_CHAR *yy_ch_buf;		/* input buffer */
    YY_CHAR *yy_buf_pos;	/* current position in input buffer */

    /* size of input buffer in bytes, not including room for EOB characters*/
    int yy_buf_size;	

    /* number of characters read into yy_ch_buf, not including EOB characters */
    int yy_n_chars;

    int yy_eof_status;		/* whether we've seen an EOF on this buffer */
#define EOF_NOT_SEEN 0
    /* "pending" happens when the EOF has been seen but there's still
     * some text process
     */
#define EOF_PENDING 1
#define EOF_DONE 2
    };

static YY_BUFFER_STATE yy_current_buffer;

/* we provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state"
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed */
static YY_CHAR yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */



#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

#ifndef YY_USER_INIT
#define YY_USER_INIT
#endif

extern YY_CHAR *yytext;
extern int yyleng;
extern FILE *yyin, *yyout;

YY_CHAR *yytext;
int yyleng;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

#define YY_END_OF_BUFFER 224
typedef int yy_state_type;
static const short int yy_accept[1027] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  224,  222,  216,  217,  215,  219,
      218,  222,  222,  220,  221,  223,   94,   95,  223,  136,
      133,  135,  136,  136,  105,  104,  105,  115,  114,  115,
      187,  186,  187,  199,  198,  199,  214,    1,    2,    3,
        4,  214,  214,  214,   17,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,    5,    6,    0,    0,   89,
        0,    0,    0,    0,   90,    0,   91,    0,   92,    0,
      133,    0,  134,  132,    0,    0,    0,    0,    0,  214,

      214,  214,  214,  214,  214,   14,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  100,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  152,  214,  214,  214,  214,  214,  169,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  179,  214,
      214,  214,  214,  214,  211,  214,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  214,  214,  214,  214,  214,   16,  214,  214,

      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      157,  214,  159,  214,  214,  214,  214,  214,  214,  214,
      184,  214,  214,  214,  214,  201,  180,  214,  214,  214,
      214,  214,  214,    0,    0,    0,    0,   86,    0,    0,
       81,   82,    0,   84,    0,    0,    0,    0,    0,    0,

      214,   12,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,   49,  214,   52,  214,  214,    0,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  120,  124,  125,  214,  127,  214,
      130,  214,  138,  139,  214,  214,  214,  143,  214,  214,
      214,  214,  214,  214,  214,  153,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  206,  214,  214,

      214,  214,    0,   88,   87,   80,   93,   85,   83,    0,
        0,    0,    0,    0,  183,  214,  214,  214,  214,  214,
      214,  214,  214,   24,   25,   26,  214,  214,  214,  214,
       31,   32,  214,  214,  214,   37,  214,   40,  214,   45,
      214,   47,  214,    0,   54,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  214,  214,  214,
      214,  214,  214,  214,  214,  214,   67,  214,  214,  214,
      214,  214,  214,   96,  214,  214,  214,  108,  110,  214,
      214,  214,  214,  123,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  156,  214,

      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  181,  214,  214,  214,  214,  214,  194,
      214,  214,  214,  208,  214,  212,  119,    0,    0,    0,
        0,    0,  214,   13,  214,  214,   20,  214,  214,   23,
      214,  214,  214,  214,   33,  214,   35,  214,   38,  214,
      214,   46,  214,   53,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      214,    0,    0,  214,  214,  214,  214,  214,   65,  214,
      214,   69,  214,  214,  214,   76,   78,  214,  214,  106,
      112,  214,  214,  214,  126,  214,    0,  214,  214,  214,

      214,  145,    0,  214,    0,  149,  214,  154,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  193,
      214,  214,    0,  214,  207,  209,    0,    0,    0,    0,
        0,  214,    0,  214,  214,   22,   27,  214,  214,  214,
       34,  214,   39,  214,   50,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  214,   57,   58,  214,  214,  214,
      214,   63,  214,  214,  214,  214,  214,   98,  101,  116,
      118,  121,  214,  137,  214,  214,  214,  214,  146,  214,

      147,  214,    0,  158,  214,  214,  214,  214,  214,  214,
      214,  170,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  200,  214,    0,  103,
        0,  185,    0,    7,   15,  214,  214,   28,  214,  214,
      214,  214,  214,  213,   48,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  128,  213,  213,
      213,  213,  214,  214,  214,  214,  214,  214,   68,  214,
      214,  214,   99,  214,  140,  214,  214,  214,  214,  214,
      155,  214,  214,  162,  214,  214,  214,  214,  214,  214,
      214,  214,  175,  214,  214,  178,  214,  190,  191,  214,

      214,  214,  214,  131,    0,    0,  214,   18,  214,  214,
       30,   36,   41,  214,  214,   43,  213,  213,  213,  213,
      213,  213,  213,   97,  213,  213,  109,  111,  213,  213,
      213,  182,  213,   55,  214,  214,  214,  214,  214,   70,
      214,  214,   74,  214,  214,  214,  214,  214,  150,  214,
      214,  214,  164,  214,  167,  214,  214,  214,  214,  214,
      214,  214,  192,  214,  196,  214,    0,    0,  214,  214,
      214,    0,   42,   44,  213,  213,  213,  213,  213,  213,
       77,   79,  213,  107,  213,  213,  213,  213,  210,  214,
      214,  214,  214,    0,   72,  214,  214,  141,  142,  214,

      148,  214,  214,  214,  214,  171,  172,  214,  214,  214,
      214,  214,  195,  202,  113,    0,    8,  214,   21,   29,
      213,   51,  213,   64,  213,  213,  102,  122,  213,  213,
      213,   59,   60,  214,  214,   66,  214,  214,  214,  214,
      161,  214,  214,  214,  214,  214,  214,  188,  214,    0,
      214,  214,  213,  213,  213,  213,  213,  213,  213,   61,
       62,  214,  129,  214,  214,  214,  165,  214,  214,  214,
      177,  214,  214,  214,    0,  214,  214,  214,   19,   56,
       71,  213,  151,  213,  168,   75,  214,  214,  163,  173,
      174,  214,  214,  203,  214,  197,  214,   10,  214,   73,

      213,  214,  214,  214,  214,  214,    9,  214,  213,  144,
      214,  176,  189,  214,  214,  214,  166,  214,  204,  214,
       11,  160,  214,  214,  205,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    1,    6,    1,    7,    1,    1,
        1,    8,    1,    1,    6,    9,    1,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,   10,    1,    1,
        1,    1,    1,   11,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,   12,    6,    6,    6,   13,    6,    6,
        1,   14,    1,    1,    6,    1,   15,   16,   17,   18,

       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,    1,   42,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[43] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    1,    1,
        1,    2,    2,    1,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        1,    1
    } ;

static const short int yy_base[1038] =
    {   0,
        0,   40,   10,   14,   21,   25,   28,   34,   35,   37,
       49,   50,   52,   53, 1081, 1082, 1082, 1082, 1082, 1082,
     1082,   77, 1057, 1082, 1082, 1082, 1082, 1082,  105, 1082,
        0,   63,   57, 1060, 1082, 1082, 1059, 1082, 1082, 1058,
     1082, 1082, 1057, 1082, 1082, 1056,    0, 1082, 1082, 1082,
     1082, 1055,   37,   34,  127,  125,  130,  106, 1041, 1053,
      143,   55, 1048,   61,  107, 1052,  150, 1034,   16,  174,
      199, 1040,  152, 1026, 1034, 1082, 1082, 1037, 1031, 1082,
      104, 1043, 1035, 1038, 1082,  115, 1082, 1045, 1082, 1044,
      167,  178, 1082,  185, 1030, 1029, 1028, 1027, 1026, 1040,

     1022, 1028, 1016, 1023, 1029, 1082, 1015, 1018, 1030,  142,
     1025,  189, 1014, 1022, 1013, 1007, 1011, 1004, 1007,  125,
     1001, 1003, 1015,  180,   51,  998,  165, 1017, 1002, 1015,
      203, 1001,  182, 1009, 1082, 1009,  987,  997,  991,  999,
      994,  993, 1001,  182, 1001,  171,  990,  994,  993,  983,
      985,  191, 1082,  986,  971,  189,  982,  995,    0,  977,
      211,  980,  991,  968,  982,  197,    4,  963, 1082,  975,
      970,  973,  975,  984, 1082,  979,  967,  973,  961,  976,
      965,  962,  965,  972,  950,  961,  955,  968,  967,  966,
      965,  964,  940,  961,  946,  956,  951,    0,  942,  941,

      944,  955,  953,  956,  951,  942,  934,  928,  936,  224,
      924,  934,  922,  929,  939,  955,  932,  935,  928,  119,
      929,  936,  939,  934,  197,  919,  917,  923,  933,  913,
      929,  920,  917,  925,  924,  913,  915,  911,  912,  897,
      896,  918,  905,  905,  898,  897,  913,  911,  901,  210,
      909,  912,  908,  897,  896,  904,  888,  211,  886,  890,
     1082,  885,  222,  886,  891,  887,  221,  888,  212,  888,
        0,  880,  894,  885,  895,    0, 1082,  874,  867,  889,
      883,  889,  884,  868,  869,  882,  881, 1082,  877,  879,
     1082, 1082,  867, 1082,  891,  890,  889,  888,  887,  849,

      862,    0,  860,  869,  858,  867,  227,  866,  843,  851,
      841,  862,  861,  847,  851,  841,  848,  839,  159,  844,
      843,  232,  844,  231, 1082,  845, 1082,  829,  828,  255,
      849,  831,  834,  228,  826,  834,  835,  834,  820,  834,
      840,  836,  829,  841,  829,  824,  830,  833,  831,  816,
      811,  816,  812,  814,  241, 1082, 1082,  826,    0,  812,
        0,  810,    0,    0,  824,  812,  821,    0,  818,  819,
      803,  802,  815,  819,  807, 1082,  806,  790,  807,  807,
      805,  804,  792,  799,  796,  804,  247,  799,  806,  791,
      791,  799,  250,  798,  797,  776,  787, 1082,  794,  782,

      785,  769,  775, 1082, 1082, 1082, 1082, 1082, 1082,  781,
      784,  783,  771,  770, 1082,  785,  770,  767,  765,  767,
      779,  778,  758, 1082,    0, 1082,  767,  766,  770,  777,
        0,  753,  775,  772,  754,  753,  767,    0,  755,    0,
      752,    0,  768,  740, 1082,    0,  766,  246,  249,  264,
      748,  263,  756,  743,  750,  761,  741,  742,  732,  731,
      742,  751,  272,  743,  734,  734, 1082,  737,  727,  269,
      735,  729,  743,    0,  733,  745,  730,    0,    0,  739,
      739,  737,  715,    0,  716,  731,  711,  732,  721,  734,
      716,  709,  705,  262,  704,  710,  717,  708, 1082,  712,

      725,  713,  704,  720,  280,  715,  720,  717,  717,  698,
      699,  712,  711,    0,  706,  704,  711,  702,  686,  280,
      682,  706,  683,    0,  701, 1082, 1082,  700,  698,  696,
      697,  692,  691,    0,  672,  695,    0,  696,  678,    0,
      675,  674,  686,  674,    0,  673,    0,  682,    0,  686,
      683,    0,  662, 1082,  668,  679,  665,  662,  681,  660,
      662,  678,  663,  285,  672,  657,  660,  673,  671,  671,
      670,  642,  641,  653,  666,  651,  660,  659,    0,  654,
      641,    0,  656,  651,  639,    0,    0,  651,  639,    0,
        0,  651,  649,  649,    0,  648,  624,  637,  630,  645,

      647,    0,  619,  632,  617, 1082,  635,    0,  616,  628,
      625,  635,  627,  623,  622,  612,  626,  607,  629,  612,
      282,  619,  605,  624,  623,  626,  614,  618,  604,    0,
      608,  621,  593,  615,    0,    0,  605,    0,  604,  593,
      596,  591,  586,  605,  608,    0,    0,  592,  602,  598,
        0,  593,    0,  285,    0,  587,  301,  590,  592,  591,
      584,  589,  599,  579,  587,  584,  592,  591,  582,  578,
      573,  580,  579,  588,  569, 1082, 1082,  568,  583,  571,
      584,    0,  569,  563,  576,  574,  575,  560,    0,    0,
        0,    0,  577, 1082,  557,  567,  566,  558, 1082,  569,

     1082,  529,  515,    0,  522,  527,    1,   30,   62,  140,
      212, 1082,  245,  286,  292,  293,  297,  300,  297,  284,
      293,  305,  306,  300,  299,  307, 1082,  297,  295,    0,
      302, 1082,  306,  300, 1082,  315,  312,    0,  302,  304,
      320,  311,  325,  312,  336,  317,  325,  315,  325,  335,
      325,  322,  334,  334,  321,  318,  335,    0,  344,  334,
      342,  336,  344,  341,  342,  332,  349,  340,    0,  335,
      348,  338,    0,  354,    0,  345,  346,  353,  357,  349,
     1082,  359,  365,    0,  347,  357,  356,  354,  357,  357,
      372,  371,    0,  360,  362,    0,  357,    0,    0,  373,

      359,  375,  376, 1082,  364,  378,  379,    0,  371,  359,
        0,    0,    0,  373,  370,    0,  368,  389,  373,  380,
      381,  374,  390,    0,  395,  382,    0,    0,  372,  381,
      397,    0,  398,    0,  390,  391,  397,  398,  381,    0,
      390,  391, 1082,  403,  406,  407,  406,  392,    0,  399,
      405,  414,    0,  404,    0,  414,  408,  419,  404,  411,
      422,  422,    0,  401,    0,  425,  425,  415,  429,  431,
      427,  407,    0,    0,  433,  412,  437,  434,  435,  432,
        0,    0,  424,    0,  438,  435,  421,  437,    0,  440,
      441,  435,  436,  423,    0,  427,  439,    0,    0,  440,

        0,  441,  451,  443,  446,    0,    0,  450,  451,  441,
      457,  445, 1082,  445, 1082,  464,  446,  448,    0, 1082,
      460,    0,  449,    0,  464,  464,    0,    0,  457,  472,
      455,    0,    0,  468,  469, 1082,  465,  471,  475,  475,
        0,  461,  477,  469,  469,  480,  462,  473,  483,  482,
      481,  486,  487,  488,  474,  487,  482,  484,  482,    0,
        0,  494,    0,  495,  478,  483,    0,  496,  491,  492,
        0,  507,  506,  508,  506,  497,  510,  512,    0,    0,
        0,  495,    0,  500,    0,    0,  503,  502,    0,    0,
        0,  499,  507,    0,  502, 1082,  508,    0,  504,    0,

      512,  505,  525,  508,  523,  524,    0,  525,  526,    0,
      525,    0,    0,  530,  532,  532,    0,  531,    0,  518,
        0,    0,  533,  536,    0, 1082,  559,  562,  565,  568,
      571,  574,  577,  579,  581,  551,  583
    } ;

static const short int yy_def[1038] =
    {   0,
     1027, 1027, 1028, 1028, 1029, 1029, 1030, 1030, 1031, 1031,
     1032, 1032, 1033, 1033, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1034, 1026, 1026, 1026,
     1026, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1034,

     1034, 1034, 1034, 1034, 1034, 1026, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1026, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1026, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1026, 1034,
     1034, 1034, 1034, 1034, 1026, 1034, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,

     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1026, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1026, 1034, 1034, 1034,
     1034, 1034, 1034, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,

     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1026, 1034, 1026, 1034, 1034, 1035,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1026, 1026, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1026, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1026, 1034, 1034,

     1034, 1034, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1026, 1034, 1026, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1026, 1026, 1035, 1035, 1035, 1035, 1035,
     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1026, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1026, 1034,

     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1026, 1035, 1035, 1035, 1035, 1035, 1035,
     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
     1034, 1026, 1026, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1026, 1034, 1034, 1034,

     1034, 1034, 1026, 1034, 1026, 1026, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1026, 1034, 1034, 1034, 1026, 1036, 1026, 1026,
     1026, 1034, 1026, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1035, 1037, 1035, 1035, 1035,
     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
     1035, 1035, 1035, 1035, 1034, 1026, 1026, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1026, 1034, 1034, 1034, 1034, 1026, 1034,

     1026, 1034, 1026, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1026, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1026, 1034, 1026, 1036,
     1026, 1026, 1026, 1034, 1026, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1035, 1037, 1035, 1035, 1035, 1035, 1035,
     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
     1035, 1035, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1026, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,

     1034, 1034, 1034, 1026, 1026, 1026, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1035, 1035, 1035, 1035,
     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
     1035, 1035, 1035, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1026, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1026, 1026, 1034, 1034,
     1034, 1026, 1034, 1034, 1035, 1035, 1035, 1035, 1035, 1035,
     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1034,
     1034, 1034, 1034, 1026, 1034, 1034, 1034, 1034, 1034, 1034,

     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1026, 1034, 1026, 1026, 1034, 1034, 1034, 1026,
     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
     1035, 1034, 1034, 1034, 1034, 1026, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1026,
     1034, 1034, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1026, 1034, 1034, 1034, 1035, 1035,
     1035, 1035, 1035, 1035, 1035, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1026, 1034, 1034, 1034, 1035,

     1035, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1035, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1035, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034,    0, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026
    } ;

static const short int yy_nxt[1125] =
    {   0,
     1026,   91,   17,   18,   91, 1026,   19, 1026,   20,   21,
       22,   27,   28,   23,   27,   27,   28, 1026,   27,  784,
       29,  275,   31,   32,   29,   31,   31,   32,   33,   31,
       36,   34,   33,  276,  152,   34,   36,   39,   37,   39,
       24,   25,   17,   18,   37,   40,   19,   40,   20,   21,
       22,   42,   42,   23,   45,   45,  153,  785,   94,   43,
       43,   94,   46,   46,   92,   93,  101,   92,  104,  102,
      136,  103,  105,  137,  106,  140,  224,  138,  225,  141,
       24,   25,   47,  142,   48,   49,   50,   51,   52,   47,
      786,   53,   54,   55,   56,   57,   58,   59,   60,   61,

       47,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   47,   47,   76,   77,   79,
       80,   81,   82,   83,   84,  143,  179,   85,  125,   86,
      184,  126,  180,  185,  127,  144,   87,   88,   89,  128,
       90,  107,  216,  114,  115,  108,  334,  116,  109,  110,
      335,  117,  111,  118,  787,  112,  119,  120,  113,  217,
      121,  122,  131,  132,  146,  123,  171,  124,   91,  202,
      133,   91,  147,  434,  172,  203,  134,  435,  148,   92,
       93,  149,   92,  135,  173,  174,   94,  150,  154,   94,
      155,  251,  156,  227,  221,  157,  228,  222,  237,  248,

      158,  238,  252,  159,  249,  262,  205,  160,  161,  223,
      258,  340,  162,  163,  341,  206,  207,  164,  208,  232,
      165,  166,  263,  259,  273,  233,  267,  167,  390,  366,
      274,  367,  168,  375,  391,  234,  235,  268,  380,  169,
      316,  381,  386,  317,  788,  441,  318,  461,  421,  462,
      319,  376,  320,  387,  388,  382,  321,  322,  323,  324,
      422,  438,  442,  483,  556,  508,  515,  789,  557,  516,
      439,  447,  448,  449,  450,  451,  558,  452,  484,  517,
      453,  509,  564,  518,  604,  454,  559,  455,  456,  560,
      457,  576,  561,  577,  583,  615,  565,  562,  616,  631,

      584,  665,  605,  715,  742,  617,  446,  666,  790,  632,
      791,  792,  446,  446,  716,  793,  794,  667,  668,  795,
      743,  796,  797,  798,  799,  800,  801,  802,  803,  804,
      805,  806,  807,  808,  809,  810,  811,  812,  813,  815,
      817,  446,  818,  819,  820,  814,  821,  446,  446,  822,
      823,  824,  825,  826,  827,  828,  816,  829,  830,  831,
      832,  833,  834,  835,  836,  837,  838,  839,  840,  841,
      842,  844,  845,  846,  847,  848,  849,  850,  843,  851,
      852,  853,  854,  855,  856,  857,  858,  859,  860,  861,
      862,  863,  864,  865,  866,  867,  868,  869,  871,  872,

      873,  874,  875,  876,  877,  878,  879,  881,  882,  883,
      884,  885,  880,  870,  886,  887,  889,  890,  891,  892,
      893,  894,  888,  895,  896,  897,  898,  899,  900,  901,
      902,  903,  904,  905,  906,  907,  908,  909,  910,  911,
      912,  913,  914,  915,  916,  917,  918,  919,  920,  921,
      922,  923,  924,  925,  926,  927,  928,  929,  930,  931,
      932,  933,  934,  935,  936,  937,  938,  939,  940,  941,
      942,  943,  944,  945,  946,  947,  948,  949,  950,  951,
      952,  953,  954,  955,  956,  957,  958,  959,  960,  961,
      962,  963,  964,  965,  966,  967,  968,  969,  970,  971,

      972,  973,  975,  976,  977,  979,  980,  981,  982,  983,
      984,  985,  986,  987,  988,  989,  990,  974,  991,  992,
      978,  993,  994,  995,  996,  997,  998,  999, 1000, 1001,
     1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,
     1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
     1023, 1024, 1025,  730,  783,  782,  781,  780, 1015,   16,
       16,   16,   26,   26,   26,   30,   30,   30,   35,   35,
       35,   38,   38,   38,   41,   41,   41,   44,   44,   44,
       47,   47,  446,  446,  745,  745,  779,  778,  777,  776,
      775,  774,  773,  772,  771,  770,  769,  768,  767,  766,

      765,  764,  763,  762,  761,  760,  759,  758,  757,  756,
      755,  754,  753,  752,  751,  750,  749,  748,  747,  746,
      744,  741,  740,  739,  738,  737,  736,  735,  734,  733,
      732,  731,  729,  728,  727,  726,  725,  724,  723,  722,
      721,  720,  719,  718,  717,  714,  713,  712,  711,  710,
      709,  708,  707,  706,  705,  704,  703,  702,  701,  700,
      699,  698,  697,  696,  695,  694,  693,  692,  691,  690,
      689,  688,  687,  686,  685,  684,  683,  682,  681,  680,
      679,  678,  677,  676,  675,  674,  673,  672,  671,  670,
      669,  664,  663,  662,  661,  660,  659,  658,  657,  656,

      655,  654,  653,  652,  651,  650,  649,  648,  647,  646,
      645,  644,  643,  642,  641,  640,  639,  638,  637,  636,
      635,  634,  633,  630,  629,  628,  627,  626,  625,  624,
      623,  622,  621,  620,  619,  618,  614,  613,  612,  611,
      610,  609,  608,  607,  606,  603,  602,  601,  600,  599,
      598,  597,  596,  595,  594,  593,  592,  591,  590,  589,
      588,  587,  586,  585,  582,  581,  580,  579,  578,  575,
      574,  573,  572,  571,  570,  569,  568,  567,  566,  563,
      555,  554,  553,  552,  551,  550,  549,  548,  547,  546,
      545,  544,  543,  542,  541,  540,  539,  538,  537,  536,

      535,  534,  533,  532,  531,  530,  529,  528,  527,  526,
      525,  524,  523,  522,  521,  520,  519,  514,  513,  512,
      511,  510,  507,  506,  505,  504,  503,  502,  501,  500,
      499,  498,  497,  496,  495,  494,  493,  492,  491,  490,
      489,  488,  487,  486,  485,  482,  481,  480,  479,  478,
      477,  476,  475,  474,  473,  472,  471,  470,  469,  468,
      467,  466,  465,  464,  463,  460,  459,  458,  445,  444,
      443,  440,  437,  436,  433,  432,  431,  430,  429,  428,
      427,  426,  425,  424,  423,  420,  419,  418,  417,  416,
      415,  414,  413,  412,  411,  410,  409,  408,  407,  406,

      405,  404,  403,  402,  401,  400,  399,  398,  397,  396,
      395,  394,  393,  392,  389,  385,  384,  383,  379,  378,
      377,  374,  373,  372,  371,  370,  369,  368,  365,  364,
      363,  362,  361,  360,  359,  358,  357,  356,  355,  354,
      353,  352,  351,  350,  349,  348,  347,  346,  345,  344,
      343,  342,  339,  338,  337,  336,  333,  332,  331,  330,
      329,  328,  327,  326,  325,  315,  314,  313,  312,  311,
      310,  309,  308,  307,  306,  305,  304,  303,  302,  301,
      300,  299,  298,  297,  296,  295,  294,  293,  292,  291,
      290,  289,  288,  287,  286,  285,  284,  283,  282,  281,

      280,  279,  278,  277,  272,  271,  270,  269,  266,  265,
      264,  261,  260,  257,  256,  255,  254,  253,  250,  247,
      246,  245,  244,  243,  242,  241,  240,  239,  236,  231,
      230,  229,  226,  220,  219,  218,  215,  214,  213,  212,
      211,  210,  209,  204,  201,  200,  199,  198,  197,  196,
      195,  194,  193,  192,  191,  190,  189,  188,  187,  186,
      183,  182,  181,  178,  177,  176,  175,  170,  151,  145,
      139,  130,  129,  100,   99,   98,   97,   96,   95,   78,
     1026,   15, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,

     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026
    } ;

static const short int yy_chk[1125] =
    {   0,
        0,   31,    1,    1,   31,    0,    1,    0,    1,    1,
        1,    3,    3,    1,    3,    4,    4,    0,    4,  707,
        3,  167,    5,    5,    4,    5,    6,    6,    5,    6,
        7,    5,    6,  167,   69,    6,    8,    9,    7,   10,
        1,    1,    2,    2,    8,    9,    2,   10,    2,    2,
        2,   11,   12,    2,   13,   14,   69,  708,   33,   11,
       12,   33,   13,   14,   32,   32,   53,   32,   54,   53,
       62,   53,   54,   62,   54,   64,  125,   62,  125,   64,
        2,    2,   22,   64,   22,   22,   22,   22,   22,   22,
      709,   22,   22,   22,   22,   22,   22,   22,   22,   22,

       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   29,
       29,   29,   29,   29,   29,   65,   81,   29,   58,   29,
       86,   58,   81,   86,   58,   65,   29,   29,   29,   58,
       29,   55,  120,   56,   56,   55,  220,   56,   55,   55,
      220,   56,   55,   56,  710,   55,   57,   57,   55,  120,
       57,   57,   61,   61,   67,   57,   73,   57,   91,  110,
       61,   91,   67,  319,   73,  110,   61,  319,   67,   92,
       92,   67,   92,   61,   73,   73,   94,   67,   70,   94,
       70,  146,   70,  127,  124,   70,  127,  124,  133,  144,

       70,  133,  146,   70,  144,  156,  112,   70,   70,  124,
      152,  225,   70,   71,  225,  112,  112,   71,  112,  131,
       71,   71,  156,  152,  166,  131,  161,   71,  269,  250,
      166,  250,   71,  258,  269,  131,  131,  161,  263,   71,
      210,  263,  267,  210,  711,  324,  210,  334,  307,  334,
      210,  258,  210,  267,  267,  263,  210,  210,  210,  210,
      307,  322,  324,  355,  448,  387,  393,  713,  448,  393,
      322,  330,  330,  330,  330,  330,  449,  330,  355,  393,
      330,  387,  452,  393,  494,  330,  449,  330,  330,  450,
      330,  463,  450,  463,  470,  505,  452,  450,  505,  520,

      470,  564,  494,  621,  654,  505,  657,  564,  714,  520,
      715,  716,  657,  657,  621,  717,  718,  564,  564,  719,
      654,  720,  721,  722,  723,  724,  725,  726,  728,  729,
      731,  733,  734,  736,  737,  739,  740,  741,  742,  743,
      744,  745,  746,  747,  748,  742,  749,  745,  745,  750,
      751,  752,  753,  754,  755,  756,  743,  757,  759,  760,
      761,  762,  763,  764,  765,  766,  767,  768,  770,  771,
      772,  774,  776,  777,  778,  779,  780,  782,  772,  783,
      785,  786,  787,  788,  789,  790,  791,  792,  794,  795,
      797,  800,  801,  802,  803,  805,  806,  807,  809,  810,

      814,  815,  817,  818,  819,  820,  821,  822,  823,  825,
      826,  829,  821,  807,  830,  831,  833,  835,  836,  837,
      838,  839,  831,  841,  842,  844,  845,  846,  847,  848,
      850,  851,  852,  854,  856,  857,  858,  859,  860,  861,
      862,  864,  866,  867,  868,  869,  870,  871,  872,  875,
      876,  877,  878,  879,  880,  883,  885,  886,  887,  888,
      890,  891,  892,  893,  894,  896,  897,  900,  902,  903,
      904,  905,  908,  909,  910,  911,  912,  914,  916,  917,
      918,  921,  923,  925,  926,  929,  930,  931,  934,  935,
      937,  938,  939,  940,  942,  943,  944,  945,  946,  947,

      948,  949,  950,  951,  952,  953,  954,  955,  956,  957,
      958,  959,  962,  964,  965,  966,  968,  949,  969,  970,
      952,  972,  973,  974,  975,  976,  977,  978,  982,  984,
      987,  988,  992,  993,  995,  997,  999, 1001, 1002, 1003,
     1004, 1005, 1006, 1008, 1009, 1011, 1014, 1015, 1016, 1018,
     1020, 1023, 1024, 1036,  706,  705,  703,  702, 1006, 1027,
     1027, 1027, 1028, 1028, 1028, 1029, 1029, 1029, 1030, 1030,
     1030, 1031, 1031, 1031, 1032, 1032, 1032, 1033, 1033, 1033,
     1034, 1034, 1035, 1035, 1037, 1037,  700,  698,  697,  696,
      695,  693,  688,  687,  686,  685,  684,  683,  681,  680,

      679,  678,  675,  674,  673,  672,  671,  670,  669,  668,
      667,  666,  665,  664,  663,  662,  661,  660,  659,  658,
      656,  652,  650,  649,  648,  645,  644,  643,  642,  641,
      640,  639,  637,  634,  633,  632,  631,  629,  628,  627,
      626,  625,  624,  623,  622,  620,  619,  618,  617,  616,
      615,  614,  613,  612,  611,  610,  609,  607,  605,  604,
      603,  601,  600,  599,  598,  597,  596,  594,  593,  592,
      589,  588,  585,  584,  583,  581,  580,  578,  577,  576,
      575,  574,  573,  572,  571,  570,  569,  568,  567,  566,
      565,  563,  562,  561,  560,  559,  558,  557,  556,  555,

      553,  551,  550,  548,  546,  544,  543,  542,  541,  539,
      538,  536,  535,  533,  532,  531,  530,  529,  528,  525,
      523,  522,  521,  519,  518,  517,  516,  515,  513,  512,
      511,  510,  509,  508,  507,  506,  504,  503,  502,  501,
      500,  498,  497,  496,  495,  493,  492,  491,  490,  489,
      488,  487,  486,  485,  483,  482,  481,  480,  477,  476,
      475,  473,  472,  471,  469,  468,  466,  465,  464,  462,
      461,  460,  459,  458,  457,  456,  455,  454,  453,  451,
      447,  444,  443,  441,  439,  437,  436,  435,  434,  433,
      432,  430,  429,  428,  427,  423,  422,  421,  420,  419,

      418,  417,  416,  414,  413,  412,  411,  410,  403,  402,
      401,  400,  399,  397,  396,  395,  394,  392,  391,  390,
      389,  388,  386,  385,  384,  383,  382,  381,  380,  379,
      378,  377,  375,  374,  373,  372,  371,  370,  369,  367,
      366,  365,  362,  360,  358,  354,  353,  352,  351,  350,
      349,  348,  347,  346,  345,  344,  343,  342,  341,  340,
      339,  338,  337,  336,  335,  333,  332,  331,  329,  328,
      326,  323,  321,  320,  318,  317,  316,  315,  314,  313,
      312,  311,  310,  309,  308,  306,  305,  304,  303,  301,
      300,  299,  298,  297,  296,  295,  293,  290,  289,  287,

      286,  285,  284,  283,  282,  281,  280,  279,  278,  275,
      274,  273,  272,  270,  268,  266,  265,  264,  262,  260,
      259,  257,  256,  255,  254,  253,  252,  251,  249,  248,
      247,  246,  245,  244,  243,  242,  241,  240,  239,  238,
      237,  236,  235,  234,  233,  232,  231,  230,  229,  228,
      227,  226,  224,  223,  222,  221,  219,  218,  217,  216,
      215,  214,  213,  212,  211,  209,  208,  207,  206,  205,
      204,  203,  202,  201,  200,  199,  197,  196,  195,  194,
      193,  192,  191,  190,  189,  188,  187,  186,  185,  184,
      183,  182,  181,  180,  179,  178,  177,  176,  174,  173,

      172,  171,  170,  168,  165,  164,  163,  162,  160,  158,
      157,  155,  154,  151,  150,  149,  148,  147,  145,  143,
      142,  141,  140,  139,  138,  137,  136,  134,  132,  130,
      129,  128,  126,  123,  122,  121,  119,  118,  117,  116,
      115,  114,  113,  111,  109,  108,  107,  105,  104,  103,
      102,  101,  100,   99,   98,   97,   96,   95,   90,   88,
       84,   83,   82,   79,   78,   75,   74,   72,   68,   66,
       63,   60,   59,   52,   46,   43,   40,   37,   34,   23,
       15, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,

     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026
    } ;

static yy_state_type yy_last_accepting_state;
static YY_CHAR *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static const short int yy_rule_linenum[223] =
    {   0,
       60,   61,   62,   63,   64,   65,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
       81,   82,   83,   84,   85,   86,   87,   88,   89,   90,
       92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
      102,  103,  104,  105,  106,  107,  108,  109,  111,  112,
      113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
      123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
      133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
      143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
      153,  154,  155,  156,  157,  158,  159,  160,  161,  162,

      163,  164,  165,  166,  167,  168,  169,  170,  171,  172,
      173,  174,  175,  176,  177,  178,  178,  184,  185,  186,
      187,  188,  189,  190,  191,  192,  193,  194,  195,  196,
      197,  198,  199,  200,  201,  202,  203,  204,  205,  206,
      207,  208,  209,  210,  211,  212,  213,  214,  215,  216,
      217,  218,  219,  220,  221,  222,  223,  224,  225,  226,
      227,  228,  229,  230,  231,  232,  233,  234,  235,  236,
      237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
      247,  248,  249,  250,  251,  252,  253,  254,  255,  256,
      257,  258,  259,  260,  261,  262,  263,  264,  265,  266,

      267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
      277,  278,  280,  281,  283,  284,  285,  286,  287,  288,
      289,  290
    } ;

/* the intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0

/* these variables are all declared out here so that section 3 code can
 * manipulate them
 */
/* points to current character in buffer */
static YY_CHAR *yy_c_buf_p = (YY_CHAR *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yyunput YY_PROTO(( YY_CHAR c, YY_CHAR *buf_ptr ));
void yyrestart YY_PROTO(( FILE *input_file ));
void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));

#define yy_new_buffer yy_create_buffer

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif

YY_DECL
    {
    register yy_state_type yy_current_state;
    register YY_CHAR *yy_cp, *yy_bp;
    register int yy_act;




    if ( yy_init )
	{
	YY_USER_INIT;

	if ( ! yy_start )
	    yy_start = 1;	/* first start state */

	if ( ! yyin )
	    yyin = stdin;

	if ( ! yyout )
	    yyout = stdout;

	if ( yy_current_buffer )
	    yy_init_buffer( yy_current_buffer, yyin );
	else
	    yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_load_buffer_state();

	yy_init = 0;
	}

    while ( 1 )		/* loops until end-of-file is reached */
	{
	yy_cp = yy_c_buf_p;

	/* support of yytext */
	*yy_cp = yy_hold_char;

	/* yy_bp points to the position in yy_ch_buf of the start of the
	 * current run.
	 */
	yy_bp = yy_cp;

	yy_current_state = yy_start;
yy_match:
	do
	    {
	    register YY_CHAR yy_c = yy_ec[*yy_cp];
	    if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = yy_def[yy_current_state];
		if ( yy_current_state >= 1027 )
		    yy_c = yy_meta[yy_c];
		}
	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	    ++yy_cp;
	    }
	while ( yy_current_state != 1026 );
	yy_cp = yy_last_accepting_cpos;
	yy_current_state = yy_last_accepting_state;

yy_find_action:
	yy_act = yy_accept[yy_current_state];

	YY_DO_BEFORE_ACTION;
	YY_USER_ACTION;

do_action:	/* this label is used only to access EOF actions */

	if ( yy_flex_debug )
	    {
	    if ( yy_act == 0 )
		fprintf( stderr, "--scanner backtracking\n" );
	    else if ( yy_act < 223 )
		fprintf( stderr, "--accepting rule at line %d (\"%s\")\n",
		         yy_rule_linenum[yy_act], yytext );
	    else if ( yy_act == 223 )
		fprintf( stderr, "--accepting default rule (\"%s\")\n",
		         yytext );
	    else if ( yy_act == 224 )
		fprintf( stderr, "--(end of buffer or a NUL)\n" );
	    else
		fprintf( stderr, "--EOF\n" );
	    }

	switch ( yy_act )
	    {
	    case 0: /* must backtrack */
	    /* undo the effects of YY_DO_BEFORE_ACTION */
	    *yy_cp = yy_hold_char;
	    yy_cp = yy_last_accepting_cpos;
	    yy_current_state = yy_last_accepting_state;
	    goto yy_find_action;

case 1:
# line 60 "scan.l"
PUTS(endl << ".br"); PUTL();
	YY_BREAK
case 2:
# line 61 "scan.l"
PUTS('.');
	YY_BREAK
case 3:
# line 62 "scan.l"
;
	YY_BREAK
case 4:
# line 63 "scan.l"
PUTS('@');
	YY_BREAK
case 5:
# line 64 "scan.l"
PUTS('{');
	YY_BREAK
case 6:
# line 65 "scan.l"
PUTS('}');
	YY_BREAK
case 7:
# line 67 "scan.l"
heading(1, eol());
	YY_BREAK
case 8:
# line 68 "scan.l"
heading(2, eol());
	YY_BREAK
case 9:
# line 69 "scan.l"
heading(2, eol());
	YY_BREAK
case 10:
# line 70 "scan.l"
heading(3, eol());
	YY_BREAK
case 11:
# line 71 "scan.l"
heading(4, eol());
	YY_BREAK
case 12:
# line 72 "scan.l"
;
	YY_BREAK
case 13:
# line 73 "scan.l"
PUTA(":hp5."); PUT(eol()); PUTA(":ehp5.");
	YY_BREAK
case 14:
# line 74 "scan.l"
PUTA(":hp2."); PUT(arg()); PUTA(":ehp2.");
	YY_BREAK
case 15:
# line 75 "scan.l"
PUTS("&sqbul.");
	YY_BREAK
case 16:
# line 76 "scan.l"
return 0;
	YY_BREAK
case 17:
# line 77 "scan.l"
skip();
	YY_BREAK
case 18:
# line 78 "scan.l"
;
	YY_BREAK
case 19:
# line 79 "scan.l"
;
	YY_BREAK
case 20:
# line 80 "scan.l"
PUTA(":lines align=center."); PUT(eol()); PUTA(":elines.");
	YY_BREAK
case 21:
# line 81 "scan.l"
heading(1, eol());
	YY_BREAK
case 22:
# line 82 "scan.l"
heading(1, eol());
	YY_BREAK
case 23:
# line 83 "scan.l"
indexes["cp"].entries[eol()].add(XItem(panel_name, panel_id));
	YY_BREAK
case 24:
# line 84 "scan.l"
PUTA(":hp1."); PUT(arg()); PUTA(":ehp1.");
	YY_BREAK
case 25:
# line 85 "scan.l"
flags[eol()] = 1;
	YY_BREAK
case 26:
# line 86 "scan.l"
font("Courier"); PUT(arg()); font(0);
	YY_BREAK
case 27:
# line 87 "scan.l"
eol();
	YY_BREAK
case 28:
# line 88 "scan.l"
;
	YY_BREAK
case 29:
# line 89 "scan.l"
PUTS("(C)");
	YY_BREAK
case 30:
# line 90 "scan.l"
/*!!*/;
	YY_BREAK
			/*	  	class/type	name	args	category	*/
case 31:
# line 92 "scan.l"
words(eol()); define(w[1],	w[2],	0,	w[0]);
	YY_BREAK
case 32:
# line 93 "scan.l"
words(eol()); define(null,	w[1],	w+2,	w[0]);
	YY_BREAK
case 33:
# line 94 "scan.l"
words(eol()); define(null,	w[1],	w+2,	w[0]);
	YY_BREAK
case 34:
# line 95 "scan.l"
words(eol()); define(w[0],	w[1],	0,	"Instance Variable");
	YY_BREAK
case 35:
# line 96 "scan.l"
words(eol()); define(null,	w[0],	w+1,	"Macro");
	YY_BREAK
case 36:
# line 97 "scan.l"
words(eol()); define(w[0],	w[1],	w+2,	"Method");
	YY_BREAK
case 37:
# line 98 "scan.l"
words(eol()); define(w[1],	w[2],	w+3,	w[0]);
	YY_BREAK
case 38:
# line 99 "scan.l"
words(eol()); define(null,	w[0],	0,	"User Option");
	YY_BREAK
case 39:
# line 100 "scan.l"
words(eol()); define(null,	w[0],	w+1,	"Special Form");
	YY_BREAK
case 40:
# line 101 "scan.l"
words(eol()); define(null,	w[1],	w+2,	w[0]);
	YY_BREAK
case 41:
# line 102 "scan.l"
words(eol()); define(w[1],	w[2],	w+3,	w[0]);
	YY_BREAK
case 42:
# line 103 "scan.l"
words(eol()); define(w[0],	w[1],	w+2,	"Function");
	YY_BREAK
case 43:
# line 104 "scan.l"
words(eol()); define(w[1],	w[2],	0,	w[0]);
	YY_BREAK
case 44:
# line 105 "scan.l"
words(eol()); define(w[0],	w[1],	0,	"Variable");
	YY_BREAK
case 45:
# line 106 "scan.l"
words(eol()); define(null,	w[0],	w+1,	"Function");
	YY_BREAK
case 46:
# line 107 "scan.l"
words(eol()); define(null,	w[0],	0,	"Variable");
	YY_BREAK
case 47:
# line 108 "scan.l"
words(eol()); define(null,	w[1],	0,	w[0]);
	YY_BREAK
case 48:
# line 109 "scan.l"
;
	YY_BREAK
case 49:
# line 111 "scan.l"
PUTA(":hp1."); PUT(arg()); PUTA(":ehp1.");
	YY_BREAK
case 50:
# line 112 "scan.l"
beg_example("default");
	YY_BREAK
case 51:
# line 113 "scan.l"
end_example();
	YY_BREAK
case 52:
# line 114 "scan.l"
PUTS(' ' << arg());
	YY_BREAK
case 53:
# line 115 "scan.l"
PUTS("&dot.&dot.&dot.");
	YY_BREAK
case 54:
# line 116 "scan.l"
PUTA(":hp1."); PUT(arg()); PUTA(":ehp1.");
	YY_BREAK
case 55:
# line 117 "scan.l"
item_begin(":ol.", 'o',0); skip();
	YY_BREAK
case 56:
# line 118 "scan.l"
item_end(":eol.");
	YY_BREAK
case 57:
# line 119 "scan.l"
PUTS("==");
	YY_BREAK
case 58:
# line 120 "scan.l"
PUTA(":hp8."); PUTS("ERROR: "); PUTA(":ehp8.");
	YY_BREAK
case 59:
# line 121 "scan.l"
eol();
	YY_BREAK
case 60:
# line 122 "scan.l"
eol();
	YY_BREAK
case 61:
# line 123 "scan.l"
eol();
	YY_BREAK
case 62:
# line 124 "scan.l"
eol();
	YY_BREAK
case 63:
# line 125 "scan.l"
beg_example("Courier");
	YY_BREAK
case 64:
# line 126 "scan.l"
end_example();
	YY_BREAK
case 65:
# line 127 "scan.l"
{ int old=margin(0); PUTS(eol()); margin(old); }
	YY_BREAK
case 66:
# line 128 "scan.l"
PUTS("==>");
	YY_BREAK
case 67:
# line 129 "scan.l"
font("Courier"); PUTS("&apos." << arg() << "&apos."); font(0);
	YY_BREAK
case 68:
# line 130 "scan.l"
;
	YY_BREAK
case 69:
# line 131 "scan.l"
indexes["fn"].entries[eol()].add(XItem(panel_name, panel_id));
	YY_BREAK
case 70:
# line 132 "scan.l"
;
	YY_BREAK
case 71:
# line 133 "scan.l"
;
	YY_BREAK
case 72:
# line 134 "scan.l"
PUTA(":lines align=right.");
	YY_BREAK
case 73:
# line 135 "scan.l"
PUTA(":elines.");
	YY_BREAK
case 74:
# line 136 "scan.l"
footnote();
	YY_BREAK
case 75:
# line 137 "scan.l"
;
	YY_BREAK
case 76:
# line 138 "scan.l"
PUTA(":lines align=left.");
	YY_BREAK
case 77:
# line 139 "scan.l"
PUTA(":elines.");
	YY_BREAK
case 78:
# line 140 "scan.l"
item_begin(":parml break=fit.", 'p',"Function"); BEGIN(TABLE);
	YY_BREAK
case 79:
# line 141 "scan.l"
item_end(":eparml.");
	YY_BREAK
case 80:
# line 142 "scan.l"
istackp->beg = Item("Courier"); istackp->end = Item("default");
	YY_BREAK
case 81:
# line 143 "scan.l"
istackp->beg = 0; istackp->end = 0;
	YY_BREAK
case 82:
# line 144 "scan.l"
istackp->beg = 0; istackp->end = 0;
	YY_BREAK
case 83:
# line 145 "scan.l"
istackp->beg = Item("Courier", 0, "&apos."); istackp->end = Item("default", 0, "&apos.");
	YY_BREAK
case 84:
# line 146 "scan.l"
istackp->beg = Item(0, 1); istackp->end = Item(0, 1);
	YY_BREAK
case 85:
# line 147 "scan.l"
istackp->beg = Item("Courier"); istackp->end =Item("default");
	YY_BREAK
case 86:
# line 148 "scan.l"
istackp->beg = Item(0, 1); istackp->end = Item(0, 1);
	YY_BREAK
case 87:
# line 149 "scan.l"
istackp->beg = Item(0, 1); istackp->end = Item(0, 1);
	YY_BREAK
case 88:
# line 150 "scan.l"
istackp->beg = 0; istackp->end = 0;
	YY_BREAK
case 89:
# line 151 "scan.l"
istackp->beg = Item(0, 2); istackp->end = Item(0, 2);
	YY_BREAK
case 90:
# line 152 "scan.l"
istackp->beg = Item(0, 1); istackp->end = Item(0, 1);
	YY_BREAK
case 91:
# line 153 "scan.l"
istackp->beg = Item("'Tms Rmn'"); istackp->end = Item("default");
	YY_BREAK
case 92:
# line 154 "scan.l"
istackp->beg = Item("Courier"); istackp->end = Item("default");
	YY_BREAK
case 93:
# line 155 "scan.l"
istackp->beg = Item(0, 1); istackp->end = Item(0, 1);
	YY_BREAK
case 94:
# line 156 "scan.l"
;
	YY_BREAK
case 95:
# line 157 "scan.l"
BEGIN(0); ++yylineno;
	YY_BREAK
case 96:
# line 158 "scan.l"
;
	YY_BREAK
case 97:
# line 159 "scan.l"
;
	YY_BREAK
case 98:
# line 160 "scan.l"
heading(2, eol());
	YY_BREAK
case 99:
# line 161 "scan.l"
eol();
	YY_BREAK
case 100:
# line 162 "scan.l"
PUTA(":hp1."); PUT(arg()); PUTA(":ehp1.");
	YY_BREAK
case 101:
# line 163 "scan.l"
if (flags[eol()]) BEGIN(FALSE);
	YY_BREAK
case 102:
# line 164 "scan.l"
;
	YY_BREAK
case 103:
# line 165 "scan.l"
BEGIN(0); eol();
	YY_BREAK
case 104:
# line 166 "scan.l"
++yylineno;
	YY_BREAK
case 105:
# line 167 "scan.l"
;
	YY_BREAK
case 106:
# line 168 "scan.l"
;
	YY_BREAK
case 107:
# line 169 "scan.l"
;
	YY_BREAK
case 108:
# line 170 "scan.l"
if (!flags[eol()]) BEGIN(FALSE);
	YY_BREAK
case 109:
# line 171 "scan.l"
;
	YY_BREAK
case 110:
# line 172 "scan.l"
BEGIN(0);
	YY_BREAK
case 111:
# line 173 "scan.l"
;
	YY_BREAK
case 112:
# line 174 "scan.l"
BEGIN(IGNORE);
	YY_BREAK
case 113:
# line 175 "scan.l"
BEGIN(0); eol();
	YY_BREAK
case 114:
# line 176 "scan.l"
++yylineno;
	YY_BREAK
case 115:
# line 177 "scan.l"
;
	YY_BREAK
case 116:
# line 178 "scan.l"
include(eol());	BEGIN(INITIAL);
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(TABLE):
case YY_STATE_EOF(MENU):
case YY_STATE_EOF(FALSE):
case YY_STATE_EOF(IGNORE):
case YY_STATE_EOF(TEX):
case YY_STATE_EOF(TITLE):
# line 179 "scan.l"
{ if (--incllevel < 0)
				yyterminate();
			  else
				yy_switch_to_buffer(inclstack[incllevel]);
			}
	YY_BREAK
case 118:
# line 184 "scan.l"
eol();
	YY_BREAK
case 119:
# line 185 "scan.l"
eol();
	YY_BREAK
case 120:
# line 186 "scan.l"
istackp->item(eol());
	YY_BREAK
case 121:
# line 187 "scan.l"
item_begin(":ul.", 'u',0); skip();
	YY_BREAK
case 122:
# line 188 "scan.l"
item_end(":eul.");
	YY_BREAK
case 123:
# line 189 "scan.l"
istackp->item(eol());
	YY_BREAK
case 124:
# line 190 "scan.l"
PUTS(arg());
	YY_BREAK
case 125:
# line 191 "scan.l"
PUTS(arg());
	YY_BREAK
case 126:
# line 192 "scan.l"
indexes["ky"].entries[eol()].add(XItem(panel_name, panel_id));
	YY_BREAK
case 127:
# line 193 "scan.l"
beg_example("Courier");
	YY_BREAK
case 128:
# line 194 "scan.l"
end_example();
	YY_BREAK
case 129:
# line 195 "scan.l"
eol();
	YY_BREAK
case 130:
# line 196 "scan.l"
eol(); BEGIN(MENU); menu.line = ""; PUTS(":parml tsize=30 break=none compact.");
	YY_BREAK
case 131:
# line 197 "scan.l"
BEGIN(0); eol(); menu.flush(); PUTS(":eparml.");
	YY_BREAK
case 132:
# line 198 "scan.l"
menu.flush(); menu.line = eol();
	YY_BREAK
case 133:
# line 199 "scan.l"
menu.line += ' '; menu.line += eol();
	YY_BREAK
case 134:
# line 200 "scan.l"
menu.flush(); PUTL(); ++yylineno;
	YY_BREAK
case 135:
# line 201 "scan.l"
++yylineno;
	YY_BREAK
case 136:
# line 202 "scan.l"
menu.flush(); PUTS(yytext[0]); PUTS(eol()); PUTL();
	YY_BREAK
case 137:
# line 203 "scan.l"
PUTS("&emdash.");
	YY_BREAK
case 138:
# line 204 "scan.l"
eol();
	YY_BREAK
case 139:
# line 205 "scan.l"
words(eol()); node(w[0], w[1], w[2], w[3]);
	YY_BREAK
case 140:
# line 206 "scan.l"
newpara = 0; PUTS(endl << ".br"); PUTL();
	YY_BREAK
case 141:
# line 207 "scan.l"
eol();
	YY_BREAK
case 142:
# line 208 "scan.l"
eol();
	YY_BREAK
case 143:
# line 209 "scan.l"
;
	YY_BREAK
case 144:
# line 210 "scan.l"
eol();
	YY_BREAK
case 145:
# line 211 "scan.l"
indexes["pg"].entries[eol()].add(XItem(panel_name, panel_id));
	YY_BREAK
case 146:
# line 212 "scan.l"
PUTS('*');
	YY_BREAK
case 147:
# line 213 "scan.l"
PUTS("&bxh.&bxri.");
	YY_BREAK
case 148:
# line 214 "scan.l"
printindex(eol());
	YY_BREAK
case 149:
# line 215 "scan.l"
words(arg()); xref("see ", w[0], w[1], w[2], w[3], w[4]);
	YY_BREAK
case 150:
# line 216 "scan.l"
margin(+10); PUTA(":rm margin=4.");
	YY_BREAK
case 151:
# line 217 "scan.l"
margin(-10); PUTA(":rm margin=1.");
	YY_BREAK
case 152:
# line 218 "scan.l"
font("'Tms Rmn'"); PUTS(arg()); font(0);
	YY_BREAK
case 153:
# line 219 "scan.l"
words(arg()); xref(0, w[0], w[1], w[2], w[3], w[4]);
	YY_BREAK
case 154:
# line 220 "scan.l"
;
	YY_BREAK
case 155:
# line 221 "scan.l"
PUTS("=>");
	YY_BREAK
case 156:
# line 222 "scan.l"
font("Courier"); PUTS("&apos." << arg() << "&apos."); font(0);
	YY_BREAK
case 157:
# line 223 "scan.l"
{ char *cp = arg(); strupr(cp); font("Helv", "8x4"); PUTS(cp); font(0); }
	YY_BREAK
case 158:
# line 224 "scan.l"
heading(2, eol());
	YY_BREAK
case 159:
# line 225 "scan.l"
flags[eol()] = 1;
	YY_BREAK
case 160:
# line 226 "scan.l"
eol();
	YY_BREAK
case 161:
# line 227 "scan.l"
eol();
	YY_BREAK
case 162:
# line 228 "scan.l"
PUT(":title." << eol() << endl << ":h1.-Preface-"); PUTL();
	YY_BREAK
case 163:
# line 229 "scan.l"
;
	YY_BREAK
case 164:
# line 230 "scan.l"
;
	YY_BREAK
case 165:
# line 231 "scan.l"
beg_example("Courier");
	YY_BREAK
case 166:
# line 232 "scan.l"
end_example();
	YY_BREAK
case 167:
# line 233 "scan.l"
beg_example("Courier");
	YY_BREAK
case 168:
# line 234 "scan.l"
end_example();
	YY_BREAK
case 169:
# line 235 "scan.l"
{ int n = atoi(eol()); while (n--) PUTS(endl << ".br" << endl); lastnl = 1; }
	YY_BREAK
case 170:
# line 236 "scan.l"
PUTA(":hp2."); PUTS(arg()); PUTA(":ehp2.");
	YY_BREAK
case 171:
# line 237 "scan.l"
heading(3, eol());
	YY_BREAK
case 172:
# line 238 "scan.l"
heading(3, eol());
	YY_BREAK
case 173:
# line 239 "scan.l"
heading(4, eol());
	YY_BREAK
case 174:
# line 240 "scan.l"
heading(4, eol());
	YY_BREAK
case 175:
# line 241 "scan.l"
eol();
	YY_BREAK
case 176:
# line 242 "scan.l"
;
	YY_BREAK
case 177:
# line 243 "scan.l"
eol();
	YY_BREAK
case 178:
# line 244 "scan.l"
eol();
	YY_BREAK
case 179:
# line 245 "scan.l"
font("Courier"); PUTS(arg()); font(0);
	YY_BREAK
case 180:
# line 246 "scan.l"
font("Courier"); PUTS(arg()); font(0);
	YY_BREAK
case 181:
# line 247 "scan.l"
BEGIN(TABLE); item_begin(":parml break=fit.", 'p',0); BEGIN(TABLE);
	YY_BREAK
case 182:
# line 248 "scan.l"
item_end(":eparml.");
	YY_BREAK
case 183:
# line 249 "scan.l"
PUTS("TeX");
	YY_BREAK
case 184:
# line 250 "scan.l"
BEGIN(TEX);
	YY_BREAK
case 185:
# line 251 "scan.l"
BEGIN(0); eol();
	YY_BREAK
case 186:
# line 252 "scan.l"
++yylineno;
	YY_BREAK
case 187:
# line 253 "scan.l"
;
	YY_BREAK
case 188:
# line 254 "scan.l"
;
	YY_BREAK
case 189:
# line 255 "scan.l"
;
	YY_BREAK
case 190:
# line 256 "scan.l"
;
	YY_BREAK
case 191:
# line 257 "scan.l"
;
	YY_BREAK
case 192:
# line 258 "scan.l"
;
	YY_BREAK
case 193:
# line 259 "scan.l"
indexes["tp"].entries[eol()].add(XItem(panel_name, panel_id));
	YY_BREAK
case 194:
# line 260 "scan.l"
;
	YY_BREAK
case 195:
# line 261 "scan.l"
arg();
	YY_BREAK
case 196:
# line 262 "scan.l"
BEGIN(TITLE);
	YY_BREAK
case 197:
# line 263 "scan.l"
BEGIN(0); eol();
	YY_BREAK
case 198:
# line 264 "scan.l"
++yylineno;
	YY_BREAK
case 199:
# line 265 "scan.l"
;
	YY_BREAK
case 200:
# line 266 "scan.l"

	YY_BREAK
case 201:
# line 267 "scan.l"
table["Top"] = Name(++hdid, 1, 0); heading(1, eol());
	YY_BREAK
case 202:
# line 268 "scan.l"
heading(1, eol());
	YY_BREAK
case 203:
# line 269 "scan.l"
heading(2, eol());
	YY_BREAK
case 204:
# line 270 "scan.l"
heading(3, eol());
	YY_BREAK
case 205:
# line 271 "scan.l"
heading(4, eol());
	YY_BREAK
case 206:
# line 272 "scan.l"
PUTA(":hp1."); PUTS(arg()); PUTA(":ehp1.");
	YY_BREAK
case 207:
# line 273 "scan.l"
indexes["vr"].entries[eol()].add(XItem(panel_name, panel_id));
	YY_BREAK
case 208:
# line 274 "scan.l"
eol();
	YY_BREAK
case 209:
# line 275 "scan.l"
BEGIN(TABLE);  item_begin(":parml break=fit.", 'p',"Variable");
	YY_BREAK
case 210:
# line 276 "scan.l"
item_end(":eparml.");
	YY_BREAK
case 211:
# line 277 "scan.l"
single_word(arg());
	YY_BREAK
case 212:
# line 278 "scan.l"
words(arg()); xref("See ", w[0], w[1], w[2], w[3], w[4]);
	YY_BREAK
case 213:
# line 280 "scan.l"
{ cerr << "Unknown control " << yytext << " in line " << yylineno << endl; }
	YY_BREAK
case 214:
# line 281 "scan.l"
{ cerr << "Unknown control " << yytext << " in line " << yylineno << endl; }
	YY_BREAK
case 215:
# line 283 "scan.l"
PUTS("&amp.");
	YY_BREAK
case 216:
# line 284 "scan.l"
++yylineno; return '\n';
	YY_BREAK
case 217:
# line 285 "scan.l"
;
	YY_BREAK
case 218:
# line 286 "scan.l"
PUTS("&colon.");
	YY_BREAK
case 219:
# line 287 "scan.l"
dot();
	YY_BREAK
case 220:
# line 288 "scan.l"
PUTS(arg());
	YY_BREAK
case 221:
# line 289 "scan.l"
return '}';
	YY_BREAK
case 222:
# line 290 "scan.l"
PUTS(yytext[0]);
	YY_BREAK
case 223:
# line 293 "scan.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK

	    case YY_END_OF_BUFFER:
		{
		/* amount of text matched not including the EOB char */
		int yy_amount_of_matched_text = yy_cp - yytext - 1;

		/* undo the effects of YY_DO_BEFORE_ACTION */
		*yy_cp = yy_hold_char;

		/* note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the end-
		 * of-buffer state).  Contrast this with the test in yyinput().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
		    /* this was really a NUL */
		    {
		    yy_state_type yy_next_state;

		    yy_c_buf_p = yytext + yy_amount_of_matched_text;

		    yy_current_state = yy_get_previous_state();

		    /* okay, we're now positioned to make the
		     * NUL transition.  We couldn't have
		     * yy_get_previous_state() go ahead and do it
		     * for us because it doesn't know how to deal
		     * with the possibility of jamming (and we
		     * don't want to build jamming into it because
		     * then it will run more slowly)
		     */

		    yy_next_state = yy_try_NUL_trans( yy_current_state );

		    yy_bp = yytext + YY_MORE_ADJ;

		    if ( yy_next_state )
			{
			/* consume the NUL */
			yy_cp = ++yy_c_buf_p;
			yy_current_state = yy_next_state;
			goto yy_match;
			}

		    else
			{
			    yy_cp = yy_last_accepting_cpos;
			    yy_current_state = yy_last_accepting_state;
			goto yy_find_action;
			}
		    }

		else switch ( yy_get_next_buffer() )
		    {
		    case EOB_ACT_END_OF_FILE:
			{
			yy_did_buffer_switch_on_eof = 0;

			if ( yywrap() )
			    {
			    /* note: because we've taken care in
			     * yy_get_next_buffer() to have set up yytext,
			     * we can now set up yy_c_buf_p so that if some
			     * total hoser (like flex itself) wants
			     * to call the scanner after we return the
			     * YY_NULL, it'll still work - another YY_NULL
			     * will get returned.
			     */
			    yy_c_buf_p = yytext + YY_MORE_ADJ;

			    yy_act = YY_STATE_EOF((yy_start - 1) / 2);
			    goto do_action;
			    }

			else
			    {
			    if ( ! yy_did_buffer_switch_on_eof )
				YY_NEW_FILE;
			    }
			}
			break;

		    case EOB_ACT_CONTINUE_SCAN:
			yy_c_buf_p = yytext + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yytext + YY_MORE_ADJ;
			goto yy_match;

		    case EOB_ACT_LAST_MATCH:
			yy_c_buf_p =
			    &yy_current_buffer->yy_ch_buf[yy_n_chars];

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yytext + YY_MORE_ADJ;
			goto yy_find_action;
		    }
		break;
		}

	    default:
#ifdef FLEX_DEBUG
		printf( "action # %d\n", yy_act );
#endif
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	    }
	}
    }


/* yy_get_next_buffer - try to read in a new buffer
 *
 * synopsis
 *     int yy_get_next_buffer();
 *     
 * returns a code representing an action
 *     EOB_ACT_LAST_MATCH - 
 *     EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *     EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()

    {
    register YY_CHAR *dest = yy_current_buffer->yy_ch_buf;
    register YY_CHAR *source = yytext - 1; /* copy prev. char, too */
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
	YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

    /* try to read more data */

    /* first move last chars to start of buffer */
    number_to_move = yy_c_buf_p - yytext;

    for ( i = 0; i < number_to_move; ++i )
	*(dest++) = *(source++);

    if ( yy_current_buffer->yy_eof_status != EOF_NOT_SEEN )
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
	yy_n_chars = 0;

    else
	{
	int num_to_read = yy_current_buffer->yy_buf_size - number_to_move - 1;

	if ( num_to_read > YY_READ_BUF_SIZE )
	    num_to_read = YY_READ_BUF_SIZE;

	else if ( num_to_read <= 0 )
	    YY_FATAL_ERROR( "fatal error - scanner input buffer overflow" );

	/* read in more data */
	YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
		  yy_n_chars, num_to_read );
	}

    if ( yy_n_chars == 0 )
	{
	if ( number_to_move == 1 )
	    {
	    ret_val = EOB_ACT_END_OF_FILE;
	    yy_current_buffer->yy_eof_status = EOF_DONE;
	    }

	else
	    {
	    ret_val = EOB_ACT_LAST_MATCH;
	    yy_current_buffer->yy_eof_status = EOF_PENDING;
	    }
	}

    else
	ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    /* yytext begins at the second character in yy_ch_buf; the first
     * character is the one which preceded it before reading in the latest
     * buffer; it needs to be kept around in case it's a newline, so
     * yy_get_previous_state() will have with '^' rules active
     */

    yytext = &yy_current_buffer->yy_ch_buf[1];

    return ( ret_val );
    }


/* yy_get_previous_state - get the state just before the EOB char was reached
 *
 * synopsis
 *     yy_state_type yy_get_previous_state();
 */

static yy_state_type yy_get_previous_state()

    {
    register yy_state_type yy_current_state;
    register YY_CHAR *yy_cp;

    yy_current_state = yy_start;

    for ( yy_cp = yytext + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
	{
	register YY_CHAR yy_c = (*yy_cp ? yy_ec[*yy_cp] : 1);
	if ( yy_accept[yy_current_state] )
	    {
	    yy_last_accepting_state = yy_current_state;
	    yy_last_accepting_cpos = yy_cp;
	    }
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	    {
	    yy_current_state = yy_def[yy_current_state];
	    if ( yy_current_state >= 1027 )
		yy_c = yy_meta[yy_c];
	    }
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	}

    return ( yy_current_state );
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *     next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( register yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
register yy_state_type yy_current_state;
#endif

    {
    register int yy_is_jam;
    register YY_CHAR *yy_cp = yy_c_buf_p;

    register YY_CHAR yy_c = 1;
    if ( yy_accept[yy_current_state] )
	{
	yy_last_accepting_state = yy_current_state;
	yy_last_accepting_cpos = yy_cp;
	}
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	{
	yy_current_state = yy_def[yy_current_state];
	if ( yy_current_state >= 1027 )
	    yy_c = yy_meta[yy_c];
	}
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    yy_is_jam = (yy_current_state == 1026);

    return ( yy_is_jam ? 0 : yy_current_state );
    }


#ifdef YY_USE_PROTOS
static void yyunput( YY_CHAR c, register YY_CHAR *yy_bp )
#else
static void yyunput( c, yy_bp )
YY_CHAR c;
register YY_CHAR *yy_bp;
#endif

    {
    register YY_CHAR *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yytext */
    *yy_cp = yy_hold_char;

    if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
	{ /* need to shift things up to make room */
	register int number_to_move = yy_n_chars + 2; /* +2 for EOB chars */
	register YY_CHAR *dest =
	    &yy_current_buffer->yy_ch_buf[yy_current_buffer->yy_buf_size + 2];
	register YY_CHAR *source =
	    &yy_current_buffer->yy_ch_buf[number_to_move];

	while ( source > yy_current_buffer->yy_ch_buf )
	    *--dest = *--source;

	yy_cp += dest - source;
	yy_bp += dest - source;
	yy_n_chars = yy_current_buffer->yy_buf_size;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
	    YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}

    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
	yy_cp[-2] = '\n';

    *--yy_cp = c;

    /* note: the formal parameter *must* be called "yy_bp" for this
     *       macro to now work correctly
     */
    YY_DO_BEFORE_ACTION; /* set up yytext again */
    }


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif

    {
    int c;
    YY_CHAR *yy_cp = yy_c_buf_p;

    *yy_cp = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
	{
	/* yy_c_buf_p now points to the character we want to return.
	 * If this occurs *before* the EOB characters, then it's a
	 * valid NUL; if not, then we've hit the end of the buffer.
	 */
	if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
	    /* this was really a NUL */
	    *yy_c_buf_p = '\0';

	else
	    { /* need more input */
	    yytext = yy_c_buf_p;
	    ++yy_c_buf_p;

	    switch ( yy_get_next_buffer() )
		{
		case EOB_ACT_END_OF_FILE:
		    {
		    if ( yywrap() )
			{
			yy_c_buf_p = yytext + YY_MORE_ADJ;
			return ( EOF );
			}

		    YY_NEW_FILE;

#ifdef __cplusplus
		    return ( yyinput() );
#else
		    return ( input() );
#endif
		    }
		    break;

		case EOB_ACT_CONTINUE_SCAN:
		    yy_c_buf_p = yytext + YY_MORE_ADJ;
		    break;

		case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
		    YY_FATAL_ERROR( "unexpected last match in yyinput()" );
#else
		    YY_FATAL_ERROR( "unexpected last match in input()" );
#endif
		}
	    }
	}

    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;

    return ( c );
    }


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif

    {
    yy_init_buffer( yy_current_buffer, input_file );
    yy_load_buffer_state();
    }


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif

    {
    if ( yy_current_buffer == new_buffer )
	return;

    if ( yy_current_buffer )
	{
	/* flush out information for old buffer */
	*yy_c_buf_p = yy_hold_char;
	yy_current_buffer->yy_buf_pos = yy_c_buf_p;
	yy_current_buffer->yy_n_chars = yy_n_chars;
	}

    yy_current_buffer = new_buffer;
    yy_load_buffer_state();

    /* we don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif

    {
    yy_n_chars = yy_current_buffer->yy_n_chars;
    yytext = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
    yyin = yy_current_buffer->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif

    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) malloc( sizeof( struct yy_buffer_state ) );

    if ( ! b )
	YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (YY_CHAR *) malloc( (unsigned) (b->yy_buf_size + 2) );

    if ( ! b->yy_ch_buf )
	YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    yy_init_buffer( b, file );

    return ( b );
    }


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif

    {
    if ( b == yy_current_buffer )
	yy_current_buffer = (YY_BUFFER_STATE) 0;

    free( (char *) b->yy_ch_buf );
    free( (char *) b );
    }


#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif

    {
    b->yy_input_file = file;

    /* we put in the '\n' and start reading from [1] so that an
     * initial match-at-newline will be true.
     */

    b->yy_ch_buf[0] = '\n';
    b->yy_n_chars = 1;

    /* we always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[1];

    b->yy_eof_status = EOF_NOT_SEEN;
    }
# line 293 "scan.l"


static String	buffer;

String &
arg()
{
	ostrstream ostr;
	ostream *old = out;
	out = &ostr;

	if (plevel == 9)
		unexpected(0);
	plines[++plevel] = yylineno;
	if (yy_flex_debug)
		fprintf(stderr, "++push to %d\n", plevel);

	int old_start = yy_start;
	int old_np = newpara;
	int old_nl = lastnl;
	BEGIN(0);
	newpara = 0;
	for (;;) {
		switch (yylex()) {
		case 0:
			unexpected("EOF");
		case '}':
			break;
		case '\n':
			if (ostr.pcount() > 100) {
				PUTL();
			} else
				PUT(' ');
			++yylineno;
			continue;
		default:
			continue;
		}
		break;
	}
	yy_start = old_start;
	newpara = old_np;
	lastnl = old_nl;

	if (yy_flex_debug)
		fprintf(stderr, "++pop from %d\n", plevel);
	--plevel;

	buffer = String(ostr.str(), ostr.pcount());
	while (buffer.length() && isspace(buffer[0]))
		buffer.del(0, 1);
	out = old;
	return buffer;
}

String &
eol()
{
	ostrstream ostr;
	ostream *old = out;
	out = &ostr;
	
	if (plevel == 9)
		unexpected(0);
	plines[++plevel] = yylineno;
	if (yy_flex_debug)
		fprintf(stderr, "++push to %d\n", plevel);

	int old_start = yy_start;
	int old_np = newpara;
	int old_nl = lastnl;
	BEGIN(0);
	newpara = 0;
	for (;;) {
		switch (yylex()) {
		case 0:
			unexpected("EOF");
		case '}':
			unput('}');
			break;
		case '\n':
			unput('\n');
			break;
		default:
			continue;
		}
		break;
	}
	yy_start = old_start;
	newpara = old_np;
	lastnl = old_nl;

	if (yy_flex_debug)
		fprintf(stderr, "++pop from %d\n", plevel);
	--plevel;

	buffer = String(ostr.str(), ostr.pcount());
	while (buffer.length() && isspace(buffer[0]))
		buffer.del(0, 1);
	out = old;
	return buffer;
}

void
unexpected(const char *msg)
{
	if (msg)
		cerr << "Unexpected EOF in line " << yylineno << endl;
	else
		cerr << "Nesting overflow in line " << yylineno << endl;
	for (; plevel; --plevel)
		cerr << "\tunterminated argument starting in line "
		     << plines[plevel] << endl;
	cerr.flush();
	exit(1);
}

void
footnote()
{
	++fnid;
	PUTS(":fn id=fn" << fnid << '.' << arg() << ":efn. "
	  << ":link reftype=fn refid=fn" << fnid << ".(" << fnid << "):elink.");
}

void
newline()
{
	if (!lastnl) {
		lastnl = 1;
		*out << endl;
	}
	if (!nofill) {
		int c = yyinput();
		if (c == '\n') {
			newpara = 1;
			do ++yylineno; while ((c = yyinput()) == '\n');
		}
		unput(c);
	}
}	

void
skip()
{
	for (int c; (c = yyinput()) != '\n'; )
		;
	++yylineno;
}

void
dot()
{
	int c = yyinput();
	if (c == '.') {
		PUTS("&dot.");
		do { PUT("&dot."); } while ((c = yyinput()) == '.');
	} else if (lastnl) {
		PUTS("&dot.");
	} else
		PUTS('.');
	unput(c);
}

void
include(const char *fname)
{
	if (incllevel >= MaxIncl) {
		fprintf(stderr, "Includes nested too deeply\n");
		exit(1);
	}
	inclstack[incllevel++] = YY_CURRENT_BUFFER;

	char name[FILENAME_MAX+1];
	strcpy(name, fname);
	char *namep = strtok(name, " \t");	// strip any blanks
	yyin = fopen(namep, "r");
	if (!yyin) {
		char *dotp = strrchr(namep, '.');
		if (dotp && !strpbrk(dotp, ":\\/") && strlen(dotp) > 4)
			dotp[4] = 0;		// truncate .texi to .tex
		yyin = fopen(namep, "r");
	}
	if (!yyin) {
		fprintf(stderr, "Cannot open include file %s\n", namep);
		exit(1);
	}

	yy_switch_to_buffer(yy_create_buffer(yyin, YY_BUF_SIZE));
}
